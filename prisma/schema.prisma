// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  id             String          @unique @default(uuid())
  name           String
  email          String          @unique
  password       String
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @default(now())
  post           post[]
  likes          like[]
  comment        comment[]
  actions        notification[]  @relation("actor")
  notifications  notification[]  @relation("receiver")
  followers      userFollowing[]
  following      userFollowing[] @relation("following")
  user_intrest   user_intrest[]
  profile_pic    image?          @relation(fields: [profile_pic_id], references: [id])
  profile_pic_id String?
}

model intrest {
  id           String         @unique @default(uuid())
  title        String         @unique
  used_count   Int
  user_intrest user_intrest[]
  post_tag     post_tag[]
  createdAt    DateTime       @default(now())
}

model post_tag {
  id        String  @unique @default(uuid())
  post      post    @relation(fields: [postId], references: [id])
  postId    String
  tag       intrest @relation(fields: [intrestId], references: [id])
  intrestId String
}

model user_intrest {
  id        String  @unique @default(uuid())
  intrest   intrest @relation(fields: [intrestId], references: [id])
  intrestId String
  user      user    @relation(fields: [userId], references: [id])
  userId    String
}

model userFollowing {
  id              String           @unique @default(uuid())
  followedUserId  String
  followedUser    user             @relation(fields: [followedUserId], references: [id])
  followingUserId String
  followingUser   user             @relation("following", fields: [followingUserId], references: [id])
  status          FOLLOWING_STATUS @default(PENDING)
  createdAt       DateTime         @default(now())
}

enum FOLLOWING_STATUS {
  PENDING
  ACCEPTED
  REJECTED
}

model post {
  id        String     @unique @default(uuid())
  message   String
  createdAt DateTime   @default(now())
  author    user       @relation(fields: [userId], references: [id])
  userId    String
  likes     like[]
  comments  comment[]
  image     image?     @relation(fields: [imageId], references: [id])
  imageId   String?
  post_tags post_tag[]
}

model like {
  id     String @unique @default(uuid())
  from   user   @relation(fields: [userId], references: [id])
  post   post   @relation(fields: [postId], references: [id])
  postId String
  userId String
}

model image {
  id        String @unique @default(uuid())
  url       String
  public_id String
  post      post[]
  user      user[]
}

model comment {
  id        String   @unique @default(uuid())
  from      user     @relation(fields: [userId], references: [id])
  userId    String
  message   String
  createdAt DateTime @default(now())
  post      post     @relation(fields: [postId], references: [id])
  postId    String
}

model notification {
  createdAt DateTime @default(now())
  id        String   @unique @default(uuid())
  activity  String
  to        user     @relation("receiver", fields: [userId], references: [id])
  userId    String
  actor     user?    @relation("actor", fields: [actorId], references: [id])
  actorId   String?
  seen      Boolean  @default(false)
}
